name: Build, push, and deploy

on:
    push:
        branches:
            - main
        paths:
            - "config/**"
            - "app/**"
            - "Dockerfile"
            - ".github/workflows/**"

jobs:
    build:
        runs-on: ubuntu-22.04

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Install doctl
              uses: digitalocean/action-doctl@v2
              with:
                  token: ${{ secrets.DOCR_ACCESS_TOKEN }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to DigitalOcean Container Registry
              uses: docker/login-action@v2
              with:
                  registry: registry.digitalocean.com
                  username: ${{ secrets.DOCR_USERNAME }}
                  password: ${{ secrets.DOCR_ACCESS_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: registry.digitalocean.com/${{ secrets.DOCR_REPOSITORY }}/backend
                  tags: backend

            - name: Build and push Docker image
              uses: docker/build-push-action@v4
              with:
                  context: .
                  push: true
                  tags: registry.digitalocean.com/${{ secrets.DOCR_REPOSITORY }}/backend:backend
                  labels: ${{ steps.meta.outputs.labels }}

            - name: Set up Kustomize
              uses: imranismail/setup-kustomize@v1
              with:
                  kustomize-version: 4.4.1

            - name: Ensure kustomize base directory exists
              run: |
                  mkdir -p kustomize/overlays/prod
                  mkdir -p config  # Ensure the base directory exists

            - name: Create kustomization.yaml if it doesn't exist
              run: |
                  if [ ! -f kustomize/overlays/prod/kustomization.yaml ]; then
                    echo "resources:" > kustomize/overlays/prod/kustomization.yaml
                    echo "- ../../base" >> kustomize/overlays/prod/kustomization.yaml
                  fi

            - name: Copy base manifests to overlay
              run: cp -R config/* kustomize/overlays/prod/

            - name: Set image in kustomize
              run: kustomize edit set image registry.digitalocean.com/${{ secrets.DOCR_REPOSITORY }}/backend:backend
              working-directory: kustomize/overlays/prod

            - name: Create secrets manifest
              run: |
                  cat <<EOF > kustomize/overlays/prod/secrets.yaml
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: sirona-backend-secrets
                  type: Opaque
                  data:
                    OPENAI_API_KEY: $(echo -n '${{ secrets.OPENAI_API_KEY }}' | base64)
                    SECRET_KEY: $(echo -n '${{ secrets.SECRET_KEY }}' | base64)
                    SQLALCHEMY_DATABASE_URI: $(echo -n '${{ secrets.SQLALCHEMY_DATABASE_URI }}' | base64)
                    MAILGUN_DOMAIN: $(echo -n '${{ secrets.MAILGUN_DOMAIN }}' | base64)
                    MAILGUN_API_KEY: $(echo -n '${{ secrets.MAILGUN_API_KEY }}' | base64)
                    MAILGUN_DEFAULT_SENDER: $(echo -n '${{ secrets.MAILGUN_DEFAULT_SENDER }}' | base64)
                    FRONTEND_URL: $(echo -n '${{ secrets.FRONTEND_URL }}' | base64)
                  EOF

            - name: Update deployment file
              run: sed -i 's|<IMAGE>|registry.digitalocean.com/${{ secrets.DOCR_REPOSITORY }}/backend:backend|' $GITHUB_WORKSPACE/config/deployment.yml

            - name: Save DigitalOcean kubeconfig with short-lived credentials
              run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 sirona-app

            - name: Deploy to DigitalOcean Kubernetes
              run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml

            - name: Verify deployment status
              run: kubectl rollout status deployment/sirona-backend-deployment --timeout=600s

            - name: Debug Deployment
              if: failure()
              run: |
                  echo "Describing deployment:"
                  kubectl describe deployment sirona-backend-deployment
                  echo "Getting pods:"
                  kubectl get pods
                  echo "Describing pods:"
                  for pod in $(kubectl get pods -o name); do kubectl describe $pod; done
                  echo "Fetching pod logs:"
                  for pod in $(kubectl get pods -o name); do kubectl logs $pod; done
